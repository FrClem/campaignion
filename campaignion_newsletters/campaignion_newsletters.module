<?php
/**
 * @file
 * Campaignion newsletter module.
 */


/**
 * Subscribe an email address to the given newsletter.
 */
function _campaignion_newsletters_subscribe($newsletter, $email) {
  $identifier = strtolower(drupal_clean_css_identifier($newsletter));
  $email = check_plain($email);

  $fields = array(
    'identifier' => $identifier,
    'email' => $email,
  );
  db_merge('campaignion_newsletters_subscriptions')
    ->key($fields)
    ->fields($fields)
    ->execute();

  module_invoke_all('campaignion_newsletters_subscribed',
    $identifier, $email);
}

/**
 * Unsubscribe an email address from the given newsletter.
 */
function _campaignion_newsletters_unsubscribe($newsletter, $email) {
  $identifier = strtolower(drupal_clean_css_identifier($newsletter));
  $email = check_plain($email);

  db_delete('campaignion_newsletters_subscriptions')
    ->condition('identifier', $identifier)
    ->condition('email', $email)
    ->execute();

  module_invoke_all('campaignion_newsletters_unsubscribed',
    $identifier, $email);
}

/**
 * Implements hook_cron().
 */
function campaignion_newsletters_cron() {
  _campaignion_newsletters_poll();
}

/**
 * Polling function.
 */
function _campaignion_newsletters_poll() {
  $providers = module_invoke_all('campaignion_newsletters_provider_info');
  foreach ($providers as $provider) {
    foreach ($provider->getLists() as $list) {

      db_merge('campaignion_newsletters_lists')
        ->key(array('identifier' => $list['identifier']))
        ->fields($list)
        ->execute();

      foreach ($provider->getSubscribers($list['identifier']) as $subscriber) {
        $fields = array(
          'identifier' => $list['identifier'],
          'email' => $subscriber,
        );
        // MySQL supports multi-value merge queries, drupal does not so far,
        // so we could replace the following by a direct call to db_query().
        db_merge('campaignion_newsletters_subscriptions')
          ->key($fields)
          ->fields($fields)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function campaignion_newsletters_permission() {
  return array(
    'administer newsletters' => array(
      'title' => t('Administer Newsletters'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function campaignion_newsletters_menu() {
  $items['admin/config/services/campaignion_newsletters'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignion_newsletters_admin_settings'),
    'access arguments' => array('administer newsletters'),
  );
  return $items;
}

/**
 * Administration form.
 */
function campaignion_newsletters_admin_settings() {
  $form = array();

  $form['poll'] = array(
    '#type' => 'button',
    '#value' => t('Update Lists and Subscribers from all external sources now!'),
    '#description' => t('Updates run automatically around every hour in the background'),
    '#weight' => 20,
    '#executes_submit_callback' => TRUE,
    '#submit' => array('campaignion_newsletters_admin_poll'),
  );

  // Leave actual implementation to submodules for now.
  return system_settings_form($form);
}

/**
 * Submit callback for the polling button in the admin interface.
 */
function campaignion_newsletters_admin_poll() {
  drupal_set_message(t('Updating newsletter data...'));
  _campaignion_newsletters_poll();
}

/**
 * Implements hook_form_alter().
 */
function campaignion_newsletters_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'redhen_contact_contact_form') {
    $mails = array();
    foreach ($form_state['redhen_contact']->allEmail() as $entry) {
      array_push($mails, $entry['value']);
    }

    $newsletters = db_select('campaignion_newsletters_lists', 'l')
      ->fields('l', array('title'))
      ->execute()
      ->fetchCol('title');

    $subscriptions = db_select('campaignion_newsletters_subscriptions', 's')
      ->fields('s', array('identifier'))
      ->condition('email', $mails, 'IN')
      ->execute()
      ->fetchCol('identifier');

    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Subscriptions'),
      '#collapsible' => FALSE,
      '#weight' => 10,
    );

    foreach ($mails as $mail) {
      $id = drupal_clean_css_identifier($mail);
      $fieldset[$id] = array(
        '#type' => 'checkboxes',
        '#title' => $mail,
        '#options' => drupal_map_assoc($newsletters),
        '#default_value' => $subscriptions,
      );
    }

    $form['newsletters_subscriptions'] = $fieldset;

    array_unshift($form['actions']['submit']['#submit'],
                  'campaignion_newsletters_redhen_contact_submit');
  }
}

/**
 * Submit handler for redhen_contact_contact_form.
 *
 * Update subscriptions in the database.
 */
function campaignion_newsletters_redhen_contact_submit($form, &$form_state) {
  foreach ($form_state['redhen_contact']->allEmail() as $mail) {
    $id = drupal_clean_css_identifier($mail['value']);
    if (!empty($form_state['input'][$id])) {
      $newsletters = $form_state['input'][$id];
      foreach ($newsletters as $key => $newsletter) {
        if ($newsletter) {
          _campaignion_newsletters_subscribe(
            $mail['value'],
            $newsletter
          );
        }
        else {
          _campaignion_newsletters_unsubscribe(
            $mail['value'],
            $newsletter
          );
        }
      }
    }
  }
}

/**
 * Implements hook_webform_component_info().
 */
function campaignion_newsletters_webform_component_info() {
  return array(
    'newsletter' => array(
      'label' => t('Newsletter Subscription'),
      'description' => t('Offers a user to subscribe to a given newsletter.'),
      'features' => array(
        'conditional' => FALSE,
      ),
      'file' => 'campaignion_newsletters.component.inc',
    ),
  );
}

/**
 * Implements hook_email_confirmed().
 */
function campaignion_newsletters_email_confirmed($node, $submission) {
  $s = new \Drupal\little_helpers\WebformSubmission($node, $submission);
  if ($s->valueByKey('newsletter')) {
    $component = $s->componentByKey('newsletter');
    _campaignion_newsletters_subscribe(
      $component['value'],
      $s->valueByKey('email')
    );
  }
}
