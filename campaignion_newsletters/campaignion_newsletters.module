<?php
/**
 * @file
 * Campaignion newsletter module.
 */

use \Drupal\campaignion_newsletters\ProviderFactory;
use \Drupal\campaignion_newsletters\NewsletterList;

/**
 * Implements hook_cron().
 */
function campaignion_newsletters_cron() {
  _campaignion_newsletters_poll();
}

/**
 * Polling function.
 */
function _campaignion_newsletters_poll() {
  $factory = ProviderFactory::getInstance();
  foreach ($factory->providers() as $source) {
    $provider = $factory->providerByKey($source);
    foreach ($provider->getLists() as $list) {
      $list->save();

      foreach ($provider->getSubscribers($list) as $subscriber) {
        $list->subscribe($subscriber, TRUE);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function campaignion_newsletters_permission() {
  return array(
    'administer newsletters' => array(
      'title' => t('Administer Newsletters'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function campaignion_newsletters_menu() {
  $items['admin/config/services/campaignion_newsletters'] = array(
    'title' => t('Newsletter settings'),
    'description' => t('Configure newsletter API behavior'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignion_newsletters_admin_settings'),
    'access arguments' => array('administer newsletters'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Administration form.
 */
function campaignion_newsletters_admin_settings() {
  $form = array();

  $form['poll'] = array(
    '#type' => 'button',
    '#value' => t('Update Lists and Subscribers from all external sources now!'),
    '#description' => t('Updates run automatically around every hour in the background'),
    '#weight' => 20,
    '#executes_submit_callback' => TRUE,
    '#submit' => array('campaignion_newsletters_admin_poll'),
  );

  // Leave actual implementation to submodules for now.
  return system_settings_form($form);
}

/**
 * Submit callback for the polling button in the admin interface.
 */
function campaignion_newsletters_admin_poll() {
  drupal_set_message(t('Updating newsletter data...'));
  _campaignion_newsletters_poll();
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_redhen_contact_contact_form_alter().
 */
function campaignion_newsletters_form_redhen_contact_contact_form_alter(&$form, &$form_state, $form_id) {
  $mails = array();
  foreach ($form_state['redhen_contact']->allEmail() as $entry) {
    $mails[] = $entry['value'];
  }

  if (!count($mails)) {
    return;
  }

  $options = array();
  $lists = NewsletterList::listAll();
  foreach ($lists as $list) {
    $options[$list->list_id] = $list->title;
  }
  $form_state['newsletter_lists'] = &$lists;

  $result = db_select('campaignion_newsletters_subscriptions', 's')
    ->fields('s', array('list_id', 'email'))
    ->condition('email', $mails, 'IN')
    ->execute();
  $subscriptions = array();
  foreach ($result as $row) {
    $subscriptions[$row->email][] = $row->list_id;
  }

  $fieldset = array(
    '#type' => 'fieldset',
    '#title' => t('Subscriptions'),
    '#collapsible' => FALSE,
    '#weight' => 10,
  );

  foreach ($mails as $mail) {
    $id = drupal_clean_css_identifier($mail);
    $fieldset[$id] = array(
      '#type' => 'checkboxes',
      '#title' => $mail,
      '#options' => $options,
      '#default_value' => isset($subscriptions[$mail]) ? $subscriptions[$mail] : array(),
    );
  }

  $form['newsletters_subscriptions'] = $fieldset;

  array_unshift($form['actions']['submit']['#submit'], 'campaignion_newsletters_redhen_contact_submit');
}

/**
 * Submit handler for redhen_contact_contact_form.
 *
 * Update subscriptions in the database.
 */
function campaignion_newsletters_redhen_contact_submit($form, &$form_state) {
  foreach ($form_state['redhen_contact']->allEmail() as $mail) {
    $id = drupal_clean_css_identifier($mail['value']);
    if (!empty($form_state['values'][$id])) {
      $newsletters = $form_state['values'][$id];
      foreach ($newsletters as $list_id => $subscribed) {
        $list = $form_state['newsletter_lists'][$list_id];
        if ($subscribed) {
          $list->subscribe($mail['value']);
        }
        else {
          $list->unsubscribe($mail['value']);
        }
      }
    }
  }
}

/**
 * Implements hook_webform_component_info().
 */
function campaignion_newsletters_webform_component_info() {
  return array(
    'newsletter' => array(
      'label' => t('Newsletter Subscription'),
      'description' => t('Offers a user to subscribe to a given newsletter.'),
      'features' => array(
        'conditional' => FALSE,
        'description' => FALSE,
      ),
      'file' => 'campaignion_newsletters.component.inc',
    ),
  );
}

/**
 * Implements hook_webform_submission_insert().
 *
 * If the webform doesn't need confirmation invoke our hook_email_confirmed()
 * immediately.
 */
function campaignion_newsletters_webform_submission_insert($node, $submission) {
  $webform = new \Drupal\little_helpers\Webform\Webform($node);
  if (!$webform->needsConfirmation()) {
    campaignion_newsletters_email_confirmed($node, $submission);
  }
}

/**
 * Implements hook_email_confirmed().
 */
function campaignion_newsletters_email_confirmed($node, $submission) {
  $s = new \Drupal\little_helpers\Webform\Submission($node, $submission);
  // use value of the component with key 'email' as email address
  if (!($email = $s->valueByKey('email'))) {
    return;
  }
  foreach ($s->webform->componentsByType('newsletter') as $component) {
    $value = $s->valuesByCid($component['cid']);
    if (!empty($value['subscribed'])) {
      foreach ($component['extra']['lists'] as $list_id => $value) {
        if (!empty($value)) {
          NewsletterList::load($list_id)->subscribe($email);
        }
      }
    }
  }
}

/**
 * Implements hook_form_builder_types().
 *
 * Defines a new form_builder field:
 * - 'title'
 * - in which ['palette_group'] it appears. @see hook_form_builder_palette_groups().
 * - it's ['default'] representation (is used when dragging it into the preview area) including:
 *   - ['#webform_component'] the component array for webform (most important it's ['#webform_component']['type'].
 *     @see hook_webform_component_info().
 *   - ['#type'] the form-API type is used as the default form_builder element_type.
 *     @see hook_element_info().
 *   - ['#form_builder'] the form_builder type (again).
 *     @see hook_form_builder_types().
 * - whether or not the field is ['unique'].
 *
 * Fields are defined per form_type (so far only 'webform' is relevant for us).
 */
function campaignion_newsletters_form_builder_types() {
  require_once dirname(__FILE__) . '/campaignion_newsletters.component.inc';
  $map = _form_builder_webform_property_map('newsletter');
  // default value is handled by the newsletter property.
  unset($map['properties']['default_value']);
  unset($map['properties']['description']);
  $fields['newsletter'] = array(
    'title' => t('Newsletter'),
    'properties' => array_keys($map['properties']),
    'default' =>  array(
      '#form_builder' => array('element_type' => 'newsletter'),
    ) + _form_builder_webform_default('newsletter'),
  );
  return array('webform' => $fields);
}

/**
 * Implements hook_form_builder_types_alter().
 *
 * Remove the email_newsletter field from ae_form_builder.
 */
function campaignion_newsletters_form_builder_types_alter(&$fields) {
  unset($fields['webform']['email_newsletter']);
}
