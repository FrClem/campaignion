<?php

use \Drupal\campaignion_action\Loader;
use \Drupal\campaignion_action\SignedLink;
use \Drupal\campaignion\CRM\Import\Source\WebformSubmission;

/**
 * Implements hook_permission().
 */
function campaignion_action_permission() {
  $permissions['campaignion view test-mode'] = array(
    'title' => t('View unpublished actions via a test link.'),
    'description' => t('Allow users to view unpublished actions with unique key in URL path'),
  );
  $permissions['campaignion view test-mode link'] = array(
    'title' => t('Generate test links.'),
    'description' => t('Allow users to see the link that can be used to access actions in test-mode.'),
  );
  return $permissions;
}

/**
 * Implements hook_node_view().
 */
function campaignion_action_node_view($node) {
  // Test publish and view node status.
  // Only unpublished nodes in full page view are affected.
  if ($node->status == NODE_NOT_PUBLISHED && node_is_page($node)) {
    // Test user permission.
    if (user_access('campaignion view test-mode link')) {
      // Construct URL link.
      if (($action = Loader::instance()->actionFromNode($node)) && ($link = $action->testLink(t('test-mode link')))) {
        $link_html = drupal_render($link);
        $link_text = t("You can use !link to view this action in test-mode.", ['!link' => $link_html]);
        drupal_set_message($link_text, 'status', FALSE);
      }
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Return NODE_ACCESS_ALLOW if url hash matches the path.
 * In other cases return NODE_ACCESS_IGNORE to allow other modules
 * or the node_access table to control access.
 */
function campaignion_action_node_access($node, $op) {
  if ($op == 'view' && isset($node->nid) && $node->status == NODE_NOT_PUBLISHED) {
    // Check whether this node's page is being viewed.
    // We can't use node_is_page() here since that results in a recursion-loop.
    if (arg(0) == 'node' && arg(1) == $node->nid) {
      // Check user permission.
      if (user_access('campaignion view test-mode')) {
        $link = SignedLink::fromCurrentLocation();
        if ($link->checkHash() && !empty($link->query['test-mode'])) {
          // Add global flag for later reference.
          return NODE_ACCESS_ALLOW;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}


/**
 * Implements hook_node_prepare().
 */
function campaignion_action_node_prepare($node) {
  if ($action = Loader::instance()->actionFromNode($node)) {
    $action->prepare();
  }
}

/**
 * Implements hook_node_presave().
 */
function campaignion_action_node_presave($node) {
  if ($action = Loader::instance()->actionFromNode($node)) {
    $action->presave();
  }
}

/**
 * Implements hook_node_update().
 */
function campaignion_action_node_update($node) {
  if ($action = Loader::instance()->actionFromNode($node)) {
    $action->update();
  }
}

/**
 * Implements hook_node_insert().
 */
function campaignion_action_node_insert($node) {
  if ($action = Loader::instance()->actionFromNode($node)) {
    $action->insert();
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Implements hook_form_webform_client_form_alter().
 *
 * Insert a custom submit handler.
 */
function campaignion_action_form_webform_client_form_alter(&$form, &$form_state) {
  $link = SignedLink::fromCurrentLocation();
  if ($link->checkHash() && !empty($link->query['test-mode'])) {
    $form_state['test_mode'] = TRUE;
  }
  $form['#submit'][] = '_campaignion_action_webform_share_redirect';
}

/**
 * Form-submit callback for webform_client_form.
 *
 * Always set the share and sid query-parameters.
 */
function _campaignion_action_webform_share_redirect($form, &$form_state) {
  if (!$form_state['webform_completed'] || !$form_state['redirect'])
    return;

  $r = $form_state['redirect'];
  if (!is_array($r)) {
    $parsed_url = drupal_parse_url($r );
  }
  else {
    // In general $form_state['redirect'] is some input for drupal_goto().
    $parsed_url = isset($r[1]) && is_array($r[1]) ? $r[1] : [];
    $parsed_url['path'] = isset($r[0]) ? $r[0] : '';
  }
  $action_path = 'node/' . $form['#node']->nid;
  $parsed_url['query']['share'] = $action_path;
  $parsed_url['query']['sid'] = $form_state['values']['details']['sid'];

  $form_state['redirect'] = [$parsed_url['path'], $parsed_url];
}

/**
 * Implements hook_webform_confirm_email_confirmation_redirect_alter().
 */
function campaignion_action_webform_confirm_email_confirmation_redirect_alter(&$redirect, $node, $submission) {
  $redirect['query']['share'] = "node/{$node->nid}";
  $redirect['query']['sid'] = $submission->sid;
}

/**
 * Implements hook_webform_submission_insert().
 */
function campaignion_action_webform_submission_insert($node, $submission) {
  $item = array('nid' => $node->nid, 'sid' => $submission->sid);
  DrupalQueue::get('campaignion_action')->createItem($item);
}

/**
 * Implements hook_cron().
 */
function campaignion_action_cron() {
  $end = time() + 10; // run for 10 seconds
  $queue = DrupalQueue::get('campaignion_action');
  while (time() < $end && ($item = $queue->claimItem())) {
    $d = &$item->data;
    $node = node_load($d['nid']);
    if ($submissionObj = WebformSubmission::load($d['nid'], $d['sid'])) {
      module_invoke_all('campaignion_action_taken', $node, $submissionObj);
    } else {
      watchdog('campaignion_action', 'Submission(!nid,!sid) has vanished before import.', array('!nid' => $d['nid'], '!sid' => $d['sid']), WATCHDOG_INFO);
    }
    $queue->deleteItem($item);
  }
}
