<?php

function _campaignion_webform2redhen_import_submission($node, $submission) {
  $importer = new \Drupal\campaignion\CRM\Import\MappedImport();
  $submissionObj = new \Drupal\campaignion\CRM\Import\Source\WebformSubmission($node, $submission);
  if (($contact = $importer->import($submissionObj)) && module_exists('webform_tracking')) {
    _campaignion_webform2redhen_webform_tracking_tags($contact, $node, $submission);
  }

  return $contact;
}

function _campaignion_webform2redhen_webform_tracking_tags($contact, $action_node, $submission) {
  $contact_tids = array();
  $wrapped_contact = $contact->wrap();
  $tagsfield = variable_get('campaignion_webform2redhen_tags_field', 'field_tags');
  $contact_terms = $wrapped_contact->$tagsfield->value();
  foreach ($contact_terms as $term) {
    $contact_tids[$term->tid] = $term->tid;
  }
  $original_contact_tids = $contact_tids;

  $tags = db_query_range('SELECT tags FROM {webform_tracking} WHERE nid = :nid AND sid = :sid', 0, 1,
    array(':nid' => $action_node->nid, ':sid' => $submission->sid))->fetchField();

  // find terms an save them in the corresponding user/redhen contact
  if ($tags) {
    $tids = array();
    $voc_name = 'ae_contact_tags_taxonomy';
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('name', explode(',', $tags))
      ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('ae_contact_tags_taxonomy')->vid)
      ->execute();
    $tids = isset($result['taxonomy_term']) ? array_keys($result['taxonomy_term']) : array();
    foreach ($tids as $tid) {
      $contact_tids[$tid] = $tid;
    }
  }

  if (!empty($action_node->$tagsfield)) {
    foreach ($action_node->$tagsfield[LANGUAGE_NONE] as $tag) {
      $tid = $tag['tid'];
      $contact_tids[$tid] = $tid;
    }
  }

  if ($original_contact_tids != $contact_tids) {
    try {
      $wrapped_contact->$tagsfield->set($contact_tids);
    } catch (EntityMetadataWrapperException $e) {
      watchdog_exception('campaignion_webform2redhen', $e);
    }
    $contact->save();
  }
}

function campaignion_webform2redhen_webform_submission_insert($node, $submission) {
  DrupalQueue::get('campaignion_webform2redhen')->createItem(array('nid' => $node->nid, 'sid' => $submission->sid));
}

function campaignion_webform2redhen_cron() {
  require_once drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc';
  $end = time() + 10; // run for 10 seconds
  $queue = DrupalQueue::get('campaignion_webform2redhen');
  while (time() < $end && ($item = $queue->claimItem())) {
    $node = node_load($item->data['nid']);
    if ($submission = webform_get_submission($item->data['nid'], $item->data['sid'])) {
      _campaignion_webform2redhen_import_submission($node, $submission);
    } else {
      watchdog('campaignion_webform2redhen', 'Submission(!nid,!sid) has vanished before import.', array('!nid' => $item->data['nid'], '!sid' => $item->data['sid']), WATCHDOG_INFO);
    }
    $queue->deleteItem($item);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Create a drupal user for each redhen contact.
 */
function campaignion_webform2redhen_entity_insert($entity, $type) {
  if ($type != 'redhen_contact') {
    return;
  }

  $name = implode(" ", array(
    check_plain($entity->first_name),
    check_plain($entity->last_name))
  );

  // check if there's already a user with this name and attach an integer
  // to keep the username unique, if so.
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('name', $name)
    ->execute();
  $user_count = isset($result['user']) ? (count($result['user']) + 1) : 0;

  if($user_count > 1) {
    $name .= " ($user_count)";
  }


  $mails = field_get_items($type, $entity, 'redhen_contact_email');
  $mail = isset($mails[0]) ? check_plain($mails[0]['value']) : '';

  $new_user = entity_create('user', array(
                'name' => $name,
                'mail' => $mail,
                'status' => 1,
                'roles' => array(
                  2 => 'authenticated user',
                  5 => 'supporter',
                ),));
  entity_save('user', $new_user);

  // entity_save('user',...) sets ->uid if it succeeds.
  if(!empty($new_user->uid)) {
    $entity->uid = $new_user->uid;
    $entity->setUser();
  }
}
